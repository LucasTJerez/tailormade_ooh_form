{"version":3,"sources":["pages/CalculateReach.js","App.js","index.js"],"names":["axios","require","default","CalculateReach","Component","constructor","props","super","state","reachData","reachName","segments","genders","ages","locations","mediums","start","end","backtrackStart","backtrackEnd","comments","formData","sampleReach","names","helperTexts","focusedInput","backtrackFocusedInput","validations","formHasError","fieldHasError","date","backtrack","handleDuration","chosenDate","this","startDate","endDate","validationsNew","diff","setValidation","setState","handleBacktrack","formDataRaw","formDataNew","key","valid","componentDidMount","localStorage","getItem","calculatedReaches","setItem","JSON","stringify","audience_api","create","baseURL","timeout","withCredentials","responseType","headers","segmentsNew","locationsNew","segmentsRaw","get","locationsRaw","all","then","spread","responses","data","enumItems","items","map","value","push","displayValue","catch","errors","alert","getFieldErrors","stringToReturn","Object","keys","forEach","slice","length","field","index","helperTextToSet","fieldHasErrorToSet","error","validateList","reachDataLists","Array","isArray","validateFails","input","includes","values","window","scrollTo","handleChange","event","fieldName","target","name","fieldVal","reachDataNew","handleSelectChange","listCopy","indexOf","splice","uploadFormula","uploadedReaches","parse","reachDataToUpload","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","dateCreated","render","classes","Grid","container","direction","spacing","item","xs","Collapse","in","Alert","className","severity","AlertTitle","FormControl","FormLabel","FormGroup","row","TextField","variant","onChange","bind","FormHelperText","Divider","divider","Autocomplete","multiple","id","options","selected","renderTags","getTagProps","option","Chip","label","renderInput","params","placeholder","genderNames","FormControlLabel","control","Checkbox","color","checked","light","ageNames","mediumNames","startDateId","endDateId","firstDayOfWeek","displayFormat","onFocusChange","onDatesChange","startDatePlaceholderText","endDatePlaceholderText","isOutsideRange","day","isInclusivelyBeforeDay","moment","component","multiline","Button","buttons","onClick","size","withStyles","theme","root","flexGrow","marginTop","marginBottom","margin","withTheme","useStyles","makeStyles","backgroundColor","paper","marginLeft","marginRight","calculateReach","padding","App","Paper","Toolbar","Typography","title","noWrap","document","querySelector"],"mappings":"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","file":"static/js/main.d24d45d5.chunk.js","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\nimport { Autocomplete, Alert, AlertTitle } from '@material-ui/lab';\r\nimport { DateRangePicker } from 'react-dates';\r\nimport moment from 'moment';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { isInclusivelyBeforeDay } from 'react-dates';\r\nimport {\r\n    Collapse,\r\n    FormControl,\r\n    FormHelperText,\r\n    Grid,\r\n    TextField,\r\n    Checkbox,\r\n    Chip,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Button,\r\n    Divider,\r\n} from '@material-ui/core';\r\nimport 'react-dates/initialize';\r\nimport 'react-dates/lib/css/_datepicker.css';\r\n\r\n//used to get market segments from audience api\r\nconst axios = require('axios').default;\r\n\r\n//styles for subcomponents\r\nconst styles = theme => ({\r\n    root: { flexGrow: 1, },\r\n    divider: {\r\n        marginTop: theme.spacing(2.5),\r\n        marginBottom: theme.spacing(2.5),\r\n    },\r\n    buttons: { margin: \"auto\", },\r\n    alert: { marginBottom: theme.spacing(2.5) }\r\n\r\n})\r\n\r\n\r\nclass CalculateReach extends Component {\r\n\r\n    state = {\r\n        reachData: { //data to upload\r\n            reachName: \"\",\r\n            segments: [],\r\n            genders: [],\r\n            ages: [],\r\n            locations: [],\r\n            mediums: [],\r\n            start: null,\r\n            end: null,\r\n            backtrackStart: null,\r\n            backtrackEnd: null,\r\n            comments: \"\",\r\n        },\r\n        formData: { //helperData for the form\r\n            sampleReach: {},\r\n            names: {},\r\n            helperTexts: {},\r\n            segments: [],\r\n            locations: [],\r\n            focusedInput: null,\r\n            backtrackFocusedInput: null,\r\n        },\r\n        validations: { //field validation and helper texts\r\n            formHasError: false,\r\n            fieldHasError: {\r\n                reachName: false,\r\n                locations: false,\r\n                date: false,\r\n                mediums: false,\r\n                ages: false,\r\n                segments: false,\r\n                genders: false,\r\n            },\r\n            helperTexts: {\r\n                reachName: \"\",\r\n                locations: \"\",\r\n                date: \"\",\r\n                mediums: \"\",\r\n                ages: \"\",\r\n                segments: \"\",\r\n                comments: \"\",\r\n                genders: \"\",\r\n                backtrack: \"\",\r\n            },\r\n        },\r\n    }\r\n\r\n    constructor(props) { // instantiates state: formData and validations. formData.segments data uploaded in componentDidMount\r\n        super(props);\r\n        const {\r\n            formData,\r\n            validations\r\n        } = this.state;\r\n\r\n        let formDataRaw = require('./formData.json');\r\n        let formDataNew = formData;\r\n        for (var key in formDataRaw) { // does not instantiate formdata.segments\r\n            formDataNew[key] = formDataRaw[key]\r\n        };\r\n\r\n        //instantiate helperTexts\r\n        let validationsNew = validations;\r\n        validationsNew.helperTexts = formDataNew.helperTexts.valid;\r\n\r\n        this.state = { ...this.state, formData: formDataNew, validations: validationsNew, };\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    componentDidMount() { //uploads sample reach ato local storage nd instantiates formdata.segments\r\n        const { formData } = this.state;\r\n\r\n        //making sure there are items in local storage, if not, upload an example\r\n        if (localStorage.getItem(\"calculatedReaches\") === null) {\r\n            let calculatedReaches = {\r\n                [formData.sampleReach.reachName]: formData.sampleReach,\r\n            };\r\n            localStorage.setItem('calculatedReaches', JSON.stringify(calculatedReaches));\r\n        };\r\n\r\n        //request segments from api\r\n        const audience_api = axios.create({\r\n            baseURL: 'https://dev-di-audience-api.apps-dev.tid.es/rest/v1',\r\n            timeout: 20000,\r\n            withCredentials: true,\r\n            responseType: 'json',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer dG1hZHNAdG1hZHM6dWlHekRFd0FoZ0FndGdXWWN0eEFSY21iR2U5RHNIODF6SUZudEUyR0g5czNLNHFIc1V5bHhnVnRraHVCTDVVOVZwRGM3WXBOaFlvSVpLNUc3V2E3T3c'\r\n            }\r\n        });\r\n\r\n\r\n        let segmentsNew = [];\r\n        let locationsNew = [];\r\n        let segmentsRaw = audience_api.get(\"enum/segments/items\")\r\n        let locationsRaw = audience_api.get(\"enum/provinces/items\")\r\n        axios.all([locationsRaw, segmentsRaw]).then(axios.spread((...responses) => {\r\n            responses[0].data.enumItems.items.map((value) => {\r\n                locationsNew.push(value.displayValue)\r\n            })\r\n            responses[1].data.enumItems.items.map((value) => {\r\n                segmentsNew.push(value.value)\r\n            })\r\n        })).catch(errors => {\r\n            alert(errors)\r\n        })\r\n        this.setState({ formData: { ...formData, segments: segmentsNew, locations: locationsNew } });\r\n    }\r\n\r\n    getFieldErrors() { //returns string of fields with errors for error alert\r\n        const { fieldHasError } = this.state.validations;\r\n        let stringToReturn = \"\";\r\n        Object.keys(fieldHasError).forEach((key) => {\r\n            if (fieldHasError[key]) {\r\n                key === \"reachName\" ?\r\n                    stringToReturn += \"reach name, \"\r\n                    :\r\n                    stringToReturn += key + \", \";\r\n            };\r\n        });\r\n        return stringToReturn.slice(0, stringToReturn.length - 2);\r\n    }\r\n\r\n    setValidation(validationsNew, field, index) { //index = -1 means field is valid, index = 0-2 indicates different errors\r\n        const helperTexts = this.state.formData.helperTexts;\r\n        let helperTextToSet = \"\";\r\n        let fieldHasErrorToSet = (index !== -1);\r\n\r\n        fieldHasErrorToSet ? helperTextToSet = helperTexts.error[field][index] : helperTextToSet = helperTexts.valid[field];\r\n\r\n        validationsNew = {\r\n            ...validationsNew,\r\n            fieldHasError: {\r\n                ...validationsNew.fieldHasError,\r\n                [field]: fieldHasErrorToSet,\r\n            },\r\n            helperTexts: {\r\n                ...validationsNew.helperTexts,\r\n                [field]: helperTextToSet,\r\n            }\r\n        };\r\n        return validationsNew;\r\n    }\r\n\r\n    validateList(validationsNew) { // check if lists in reachData are empty\r\n        let reachDataLists = this.state.reachData;\r\n\r\n        Object.keys(reachDataLists).forEach((key) => {\r\n            if (Array.isArray(reachDataLists[key])) {\r\n                if (reachDataLists[key].length === 0) {\r\n                    validationsNew = this.setValidation(validationsNew, key, 0);\r\n                }\r\n                else {\r\n                    validationsNew = this.setValidation(validationsNew, key, -1);\r\n                };\r\n            };\r\n        });\r\n        return validationsNew;\r\n    }\r\n\r\n    validateFails(input) {\r\n        const {\r\n            reachData,\r\n            validations,\r\n        } = this.state;\r\n        const {\r\n            reachName,\r\n            start,\r\n            end,\r\n        } = reachData;\r\n        let validationsNew = validations;\r\n\r\n\r\n        //validate reachName\r\n        if (reachName.length < 4) {\r\n            validationsNew = this.setValidation(validationsNew, \"reachName\", 0);\r\n        }\r\n        else if (reachName.includes(\" \")) {\r\n            validationsNew = this.setValidation(validationsNew, \"reachName\", 1);\r\n        }\r\n        else {\r\n            validationsNew = this.setValidation(validationsNew, \"reachName\", -1);\r\n        };\r\n\r\n        //validate duration\r\n        if (start === null || end === null) {\r\n            validationsNew = this.setValidation(validationsNew, \"date\", 1);\r\n        };\r\n\r\n        //validate reachData lists (segments, genders, ages, locations, mediums)\r\n        validationsNew = this.validateList(validationsNew);\r\n\r\n        let hasError = validationsNew.formHasError = Object.values(validationsNew.fieldHasError).includes(true);\r\n        if (hasError) { window.scrollTo(0, 0) };\r\n\r\n\r\n        this.setState({ validations: validationsNew });\r\n    }\r\n\r\n    handleChange(event) {\r\n        let fieldName = event.target.name;\r\n        let fieldVal = event.target.value;\r\n        let reachDataNew = this.state.reachData;\r\n\r\n        reachDataNew[fieldName] = fieldVal;\r\n        this.setState({ reachData: reachDataNew });\r\n    }\r\n\r\n    handleSelectChange(event) {\r\n        let fieldName = event.target.name;\r\n        let fieldVal = event.target.value;\r\n        let reachDataNew = this.state.reachData;\r\n        let listCopy = reachDataNew[fieldName];\r\n\r\n        if (listCopy.indexOf(fieldVal) === -1) {\r\n            listCopy.push(fieldVal);\r\n        }\r\n        else {\r\n            listCopy.splice(listCopy.indexOf(fieldVal), 1);\r\n        };\r\n\r\n        reachDataNew[fieldName] = listCopy;\r\n\r\n        this.setState({ reachData: reachDataNew });\r\n    }\r\n\r\n    handleDuration = (chosenDate) => {\r\n        const {\r\n            reachData,\r\n            validations,\r\n        } = this.state;\r\n        let {\r\n            startDate,\r\n            endDate\r\n        } = chosenDate;\r\n        let validationsNew = validations;\r\n\r\n        if (startDate && endDate && (endDate.diff(startDate, 'days') > 15)) {\r\n            validationsNew = this.setValidation(validationsNew, \"date\", 0);\r\n            endDate = null;\r\n        }\r\n        else {\r\n            validationsNew = this.setValidation(validationsNew, \"date\", -1);\r\n        };\r\n        this.setState({ reachData: { ...reachData, start: startDate, end: endDate }, validations: validationsNew });\r\n    }\r\n\r\n    handleBacktrack = (chosenDate) => {\r\n        const {\r\n            reachData,\r\n        } = this.state;\r\n        let {\r\n            startDate,\r\n            endDate\r\n        } = chosenDate;\r\n        this.setState({ reachData: { ...reachData, backtrackStart: startDate, backtrackEnd: endDate } });\r\n    }\r\n\r\n\r\n    uploadFormula() {\r\n\r\n        this.validateFails();\r\n\r\n        if (!this.state.validations.formHasError) {\r\n            const uploadedReaches = JSON.parse(localStorage.getItem('calculatedReaches'));\r\n            const reachDataToUpload = this.state.reachData;\r\n\r\n            var today = new Date();\r\n            var dd = String(today.getDate()).padStart(2, '0');\r\n            var mm = String(today.getMonth() + 1).padStart(2, '0');\r\n            var yyyy = today.getFullYear();\r\n            today = mm + '/' + dd + '/' + yyyy;\r\n            reachDataToUpload.dateCreated = today\r\n            \r\n            uploadedReaches[reachDataToUpload.reachName] = reachDataToUpload;\r\n            localStorage.setItem('calculatedReaches', JSON.stringify(uploadedReaches));\r\n        };\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const {\r\n            reachData,\r\n            validations,\r\n            formData,\r\n        } = this.state;\r\n        const {\r\n            mediums,\r\n            start,\r\n            end,\r\n            backtrackStart,\r\n            backtrackEnd,\r\n            ages,\r\n            genders,\r\n        } = reachData;\r\n        const {\r\n            fieldHasError,\r\n            helperTexts,\r\n        } = validations;\r\n\r\n        return (\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                spacing={3}\r\n            >\r\n                <Grid item xs={12}>\r\n                    <Collapse in={this.state.validations.formHasError}>\r\n                        <Alert className={classes.alert} severity=\"error\">\r\n                            <AlertTitle >Error</AlertTitle>\r\n                            Fields:\r\n                            <strong>\r\n                                {\" \" + this.getFieldErrors()}\r\n                            </strong>\r\n                        </Alert>\r\n                    </Collapse>\r\n\r\n                    {/* reachName name */}\r\n                    <FormControl error={fieldHasError.reachName}>\r\n                        <FormLabel>Reach Name</FormLabel>\r\n                        <FormGroup row >\r\n                            <TextField\r\n\r\n                                variant=\"outlined\"\r\n                                name={\"reachName\"}\r\n                                onChange={this.handleChange.bind(this)}\r\n                                error={fieldHasError.reachName}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormHelperText >{helperTexts.reachName}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Divider className={classes.divider} />\r\n\r\n                    {/* segments */}\r\n                    <Autocomplete\r\n                        multiple\r\n                        id=\"tags-filled\"\r\n                        options={formData.segments}\r\n                        value={reachData.segments}\r\n                        onChange={(event, selected) => {\r\n                            this.setState({\r\n                                reachData: {\r\n                                    ...reachData,\r\n                                    segments: selected\r\n                                }\r\n                            })\r\n                        }}\r\n                        renderTags={(value, getTagProps) =>\r\n                            value.map((option, index) => (\r\n                                <Chip label={option} {...getTagProps({ index })} />\r\n                            ))\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <FormControl error={fieldHasError.segments}>\r\n                                <FormLabel>Segments</FormLabel>\r\n                                <TextField error={fieldHasError.segments} {...params} variant=\"outlined\" placeholder=\"Search here\" />\r\n                                <FormHelperText >{helperTexts.segments}</FormHelperText>\r\n                            </FormControl>\r\n                        )}\r\n                    />\r\n\r\n                    <Divider className={classes.divider} />\r\n\r\n                    {/* locations */}\r\n                    <Autocomplete\r\n                        multiple\r\n                        id=\"tags-filled\"\r\n                        options={formData.locations}\r\n                        // freeSolo //allows any input\r\n                        value={reachData.locations}\r\n                        onChange={(event, selected) => {\r\n                            this.setState({\r\n                                reachData: {\r\n                                    ...reachData,\r\n                                    locations: selected\r\n                                }\r\n                            })\r\n                        }}\r\n                        renderTags={(value, getTagProps) =>\r\n                            value.map((option, index) => (\r\n                                <Chip label={option} {...getTagProps({ index })} />\r\n                            ))\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <FormControl error={fieldHasError.locations}>\r\n                                <FormLabel>Locations</FormLabel>\r\n                                <TextField error={fieldHasError.locations} {...params} variant=\"outlined\" placeholder=\"Search here\" />\r\n                                <FormHelperText >{helperTexts.locations}</FormHelperText>\r\n                            </FormControl>\r\n                        )}\r\n                    />\r\n\r\n                    <Divider className={classes.divider} />\r\n\r\n                    {/* genders */}\r\n                    <FormControl error={fieldHasError.genders}>\r\n                        <FormLabel>Genders</FormLabel>\r\n                        <FormGroup row>\r\n                            {formData.names.genderNames.map((name) => (\r\n                                <FormControlLabel\r\n                                    key={name}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            color=\"primary\"\r\n                                            checked={genders.indexOf(name) > -1}\r\n                                            name={\"genders\"}\r\n                                            value={name}\r\n                                            onChange={this.handleSelectChange.bind(this)}\r\n                                        />\r\n                                    }\r\n                                    label={name}\r\n                                />\r\n                            ))}\r\n                        </FormGroup>\r\n                        <FormHelperText>{helperTexts.genders}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Divider light className={classes.divider} />\r\n\r\n                    {/* age */}\r\n                    <FormControl error={fieldHasError.ages}>\r\n                        <FormLabel>Ages</FormLabel>\r\n                        <FormGroup row>\r\n                            {formData.names.ageNames.map((name) => (\r\n                                <FormControlLabel\r\n                                    key={name}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            name={\"ages\"}\r\n                                            value={name}\r\n                                            onChange={this.handleSelectChange.bind(this)}\r\n                                            color=\"primary\"\r\n                                            checked={ages.indexOf(name) > -1}\r\n                                        />\r\n                                    }\r\n                                    label={name}\r\n                                />\r\n                            ))}\r\n                        </FormGroup>\r\n                        <FormHelperText>{helperTexts.ages}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Divider className={classes.divider} />\r\n\r\n                    {/* medium */}\r\n                    <FormControl error={fieldHasError.mediums}>\r\n                        <FormLabel>Mediums</FormLabel>\r\n                        <FormGroup row>\r\n                            {formData.names.mediumNames.map((name) => (\r\n                                <FormControlLabel\r\n                                    key={name}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            color=\"primary\"\r\n                                            checked={mediums.indexOf(name) > -1}\r\n                                            name={\"mediums\"}\r\n                                            value={name}\r\n                                            onChange={this.handleSelectChange.bind(this)}\r\n                                        />\r\n                                    }\r\n                                    label={name}\r\n                                />\r\n                            ))}\r\n\r\n                        </FormGroup>\r\n                        <FormHelperText>{helperTexts.mediums}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Divider light className={classes.divider} />\r\n\r\n                    {/* DATE RANGE PICKER */}\r\n                    <FormControl error={fieldHasError.date}>\r\n                        <FormLabel>Duration</FormLabel>\r\n                        <FormGroup row>\r\n                            <DateRangePicker\r\n                                startDateId=\"durationStart\"\r\n                                endDateId=\"durationEnd\"\r\n                                firstDayOfWeek={1}\r\n                                startDate={start}\r\n                                endDate={end}\r\n                                displayFormat=\"DD-MM-YYYY\"\r\n                                focusedInput={formData.focusedInput}\r\n                                onFocusChange={focusedInput =>\r\n                                    this.setState({ formData: { ...formData, focusedInput } })\r\n                                }\r\n                                onDatesChange={this.handleDuration}\r\n                                startDatePlaceholderText=\" Start date\"\r\n                                endDatePlaceholderText=\" End date\"\r\n                            />\r\n                        </FormGroup>\r\n                        <FormHelperText>{helperTexts.date}</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Divider className={classes.divider} />\r\n\r\n                    {/* backtrack */}\r\n                    <FormControl error={validations.backtrack}>\r\n                        <FormLabel>Backtrack Data</FormLabel>\r\n                        <FormGroup row>\r\n                            <DateRangePicker\r\n                                startDateId=\"backtrackStart\"\r\n                                endDateId=\"backtrackEnd\"\r\n                                isOutsideRange={day => !isInclusivelyBeforeDay(day, moment())}\r\n                                firstDayOfWeek={1}\r\n                                startDate={backtrackStart}\r\n                                endDate={backtrackEnd}\r\n                                displayFormat=\"DD-MM-YYYY\"\r\n                                focusedInput={formData.backtrackFocusedInput}\r\n                                onFocusChange={backtrackFocusedInput =>\r\n                                    this.setState({ formData: { ...formData, backtrackFocusedInput } })\r\n                                }\r\n                                onDatesChange={this.handleBacktrack}\r\n                                startDatePlaceholderText=\" Start date\"\r\n                                endDatePlaceholderText=\" End date\"\r\n                            />\r\n                        </FormGroup>\r\n                        <FormHelperText>*optional: use data from a period of time</FormHelperText>\r\n                    </FormControl>\r\n\r\n                    <Divider className={classes.divider} />\r\n\r\n\r\n                    {/* comments */}\r\n                    <FormControl >\r\n                        <FormGroup component=\"legend\">\r\n                            <FormLabel >Comments</FormLabel>\r\n                            <TextField\r\n                                name={\"comments\"}\r\n                                onChange={this.handleChange.bind(this)}\r\n                                color=\"primary\"\r\n                                multiline\r\n                                variant=\"outlined\"\r\n                            />\r\n\r\n                        </FormGroup>\r\n                        <FormHelperText>{helperTexts.comments}</FormHelperText>\r\n                    </FormControl>\r\n                </Grid >\r\n\r\n                <Button\r\n                    className={classes.buttons}\r\n                    onClick={() => this.uploadFormula()}\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    color=\"primary\"\r\n                >\r\n                    Submit\r\n                    </Button>\r\n            </Grid >\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles, { withTheme: true })(CalculateReach);","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Typography, Toolbar, Paper } from '@material-ui/core';\r\n\r\nimport CalculateReach from \"./pages/CalculateReach\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: '#757ce8',\r\n    },\r\n    paper: {\r\n        marginLeft: theme.spacing(8),\r\n        marginRight: theme.spacing(8),\r\n    },\r\n    calculateReach: {\r\n        padding: theme.spacing(4),\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root} >\r\n\r\n\r\n            <Paper className={classes.paper}>\r\n\r\n                    <Toolbar>\r\n                        <Typography color=\"textSecondary\" className={classes.title} variant=\"h4\" noWrap>\r\n                            Out-of-Home Reach Request Form\r\n          </Typography>\r\n                    </Toolbar>\r\n                <div className={classes.calculateReach}>\r\n                    <CalculateReach />\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from 'react';\r\nimport { render } from 'react-snapshot';\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\n\r\n\r\n\r\nrender(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}